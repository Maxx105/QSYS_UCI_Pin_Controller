-- UCI Pin Controller
-- by Maxx Sanner
-- March 2022

-- Information block for the plugin
PluginInfo = {
  Name = "My Plugins~UCI Pin Controller",
  Version = "1.1",
  BuildVersion = "0.0.0.0",
  Id = "297d2ac8-8a49-40f7-b608-7f042a185039",
  Author = "Maxx Sanner",
  Description = "A plugin that provides a custom pinpad as well as the ability to dynamically and easily assign a pin to a UCI. "  
}

-- Define the color of the plugin object in the design
function GetColor(props)
  return { 102, 102, 102 }
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "UCI Pin Controller\nv" .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
PageNames = { "Pin Setup", "Pin Pad" }  --List the pages within the plugin
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
  local model = {}
 return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(props, {
    Name = "Debug Print",
    Type = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value = "None"
  })
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}
  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}
  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  --buttons
  table.insert(ctrls, {Name = "AddPinSubmit", ControlType = "Button", ButtonType = "Trigger", Count = 1, UserPin = true, PinStyle = "Both", Icon = "Plus"})
  table.insert(ctrls, {Name = "PinPadBackspace", ControlType = "Button", ButtonType = "Trigger", Count = 1, UserPin = true, PinStyle = "Both", Icon = "Arrow Left"})
  table.insert(ctrls, {Name = "PinPadClear", ControlType = "Button", ButtonType = "Trigger", Count = 1, UserPin = true, PinStyle = "Both", Icon = "X"})
  table.insert(ctrls, {Name = "PinPadDigits", ControlType = "Button", ButtonType = "Trigger", Count = 12, UserPin = true, PinStyle = "Both"})
  table.insert(ctrls, {Name = "PinPadEnter", ControlType = "Button", ButtonType = "Trigger", Count = 1, UserPin = true, PinStyle = "Both"})
  
  --text
  table.insert(ctrls, {Name = "UCIPinName", ControlType = "Text", Count = 1, UserPin = true, PinStyle = "Both"})
  table.insert(ctrls, {Name = "TouchPanel", ControlType = "Text", Count = 1, UserPin = true, PinStyle = "Both"})
  table.insert(ctrls, {Name = "UCIPin", ControlType = "Text", Count = 1, UserPin = true, PinStyle = "Output"})
  table.insert(ctrls, {Name = "UCI", ControlType = "Text", Count = 1, UserPin = true, PinStyle = "Both"})
  table.insert(ctrls, {Name = "UCIPage", ControlType = "Text", Count = 1, UserPin = true, PinStyle = "Both"})
  table.insert(ctrls, {Name = "AddPinName", ControlType = "Text", Count = 1, UserPin = true, PinStyle = "Both"})
  table.insert(ctrls, {Name = "AddPinPin", ControlType = "Text", Count = 1, UserPin = true, PinStyle = "Both"})
  table.insert(ctrls, {Name = "Status", ControlType = "Text", Count = 1, UserPin = true, PinStyle = "Output"})
  table.insert(ctrls, {Name = "PinPadPin", ControlType = "Text", Count = 1, UserPin = true, PinStyle = "Both"})
  table.insert(ctrls, {Name = "CoreUsername", ControlType = "Text", Count = 1, UserPin = true, PinStyle = "Both"})
  table.insert(ctrls, {Name = "CorePassword", ControlType = "Text", Count = 1, UserPin = true, PinStyle = "Both"})
  
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  local CurrentPage = PageNames[props["page_index"].Value]
  local pinPadChars = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "*", "0", "#"}
  
  -- Starting coordinates of top left pin pad button.
  local ColOne = 86
  local RowOne = 140
  
  -- Space between colums and rows on pin pad.
  local ColSpacing = 59
  local RowSpacing = 41
  
  function PinPadPositions()
    local PosTbl = {}
    for i = 1, 4 do 
      for j = 1, 3 do 
        table.insert(PosTbl, {ColOne + ColSpacing*(j-1), RowOne + RowSpacing*(i-1)})
      end
    end
    return PosTbl
  end
  
  table.insert(graphics,{Type = "GroupBox", Fill = {220,220,220}, StrokeWidth = 1, Position = {0,0}, Size = {348,409}, CornerRadius = 8})
  table.insert(graphics,{Type = "Text", Text = "UCI Pin Controller", Position = {15,9}, Size = {234,38}, FontSize = 22,HTextAlign = "Left", IsBold = true})
  
  if CurrentPage == "Pin Setup" then
    table.insert(graphics,{Type = "Text", Text = "UCI Pin Name:", Position = {15,63}, Size = {148,23}, FontSize = 14,HTextAlign = "Left", IsBold = true})
    table.insert(graphics,{Type = "Text", Text = "Touch Panel:", Position = {186,63}, Size = {148,23}, FontSize = 14,HTextAlign = "Left", IsBold = true})
    table.insert(graphics,{Type = "Text", Text = "UCI Pin:", Position = {15,114}, Size = {148,23}, FontSize = 14,HTextAlign = "Left", IsBold = true})
    table.insert(graphics,{Type = "Text", Text = "UCI:", Position = {186,114}, Size = {148,23}, FontSize = 14,HTextAlign = "Left", IsBold = true})
    table.insert(graphics,{Type = "Text", Text = "UCI Page:", Position = {186,165}, Size = {148,23}, FontSize = 14,HTextAlign = "Left", IsBold = true})
    table.insert(graphics,{Type = "Text", Text = "Pin Name:", Position = {15,253}, Size = {148,23}, FontSize = 14,HTextAlign = "Left", IsBold = true})
    table.insert(graphics,{Type = "Text", Text = "Pin:", Position = {186,253}, Size = {148,23}, FontSize = 14,HTextAlign = "Left", IsBold = true})
    table.insert(graphics,{Type = "Text", Text = "Username:", Position = {203,9}, Size = {59,16}, FontSize = 9,HTextAlign = "Left"})
    table.insert(graphics,{Type = "Text", Text = "Password:", Position = {203,25}, Size = {59,16}, FontSize = 9,HTextAlign = "Left"})
    table.insert(graphics,{Type = "Header",Text = "Pin Creation",HTextAlign = "Center",Font = "Roboto",FontSize = 16,Position = {0,230},Size = {348,16}})
  
    layout["UCIPinName"] = {PrettyName = "Setup~UCI Pin Name", Style = "ComboBox", Position = {15,86}, Size = {148,28}, FontSize = 14}
    layout["TouchPanel"] = {PrettyName = "Setup~Touch Panel", Style = "ComboBox", Position = {186,86}, Size = {148,28}, FontSize = 14}
    layout["UCIPin"] = {PrettyName = "Setup~UCI Pin", Style = "Text", IsReadyOnly = true, Position = {15,137}, Size = {148,28}, Color={194,194,194}, FontSize = 14}
    layout["UCI"] = {PrettyName = "Setup~UCI", Style = "ComboBox", Position = {186,137}, Size = {148,28}, FontSize = 14}
    layout["UCIPage"] = {PrettyName = "Setup~UCI Page", Style = "ComboBox", Position = {186,188}, Size = {148,28}, FontSize = 14}
    layout["AddPinName"] = {PrettyName = "Add Pin~Name", Style = "Text", Position = {15,276}, Size = {148,28}, FontSize = 14}
    layout["AddPinPin"] = {PrettyName = "Add Pin~Pin", Style = "Text", Position = {186,276}, Size = {148,28}, FontSize = 14}
    layout["AddPinSubmit"] = {PrettyName = "Add Pin~Submit", Style = "Button", Position = {15,311}, Size = {319,29}, Color = {255,255,255}, UnlinkOffColor = true, OffColor = {124,124,124}}
    layout["Status"] = {PrettyName = "Status", Style = "Text", IsReadyOnly = true, Position = {15,358}, Size = {319,30}, Color={194,194,194}, FontSize = 14}
    layout["CoreUsername"] =  {PrettyName = "Credentials~Username", Style = "Text", Position = {262,9}, Size = {78,16}, FontSize = 9}
    layout["CorePassword"] =  {PrettyName = "Credentials~Password", Style = "Text", Position = {262,25}, Size = {78,16}, FontSize = 9}
  
  elseif CurrentPage == "Pin Pad" then
    layout["PinPadBackspace"] = {PrettyName = "Pin Pad~Backspace", Style = "Button", Position = {223,71}, Size = {38,26}, Color = {255,255,255}, UnlinkOffColor = true, OffColor = {124,124,124}}
    layout["PinPadClear"] = {PrettyName = "Pin Pad~Clear", Style = "Button", Position = {261,71}, Size = {38,26}, Color = {255,255,255}, UnlinkOffColor = true, OffColor = {124,124,124}}
    layout["PinPadPin"] = {PrettyName = "Pin Pad~Pin", Style = "Text", Position = {50,100}, Size = {249,26}, FontSize = 14}
    layout["PinPadEnter"] = {PrettyName = "Pin Pad~Enter", Style = "Button", Legend = "Enter", Position = {86,305}, Size = {176,38}, Color = {255,255,255}, UnlinkOffColor = true, OffColor = {124,124,124}, FontSize = 14}
    for i, v in ipairs(pinPadChars) do
      layout["PinPadDigits "..i] = {PrettyName = "Pin Pad~"..v, Style = "Button", Legend = v, Position = PinPadPositions()[i], Size = {58,40}, Color = {255,255,255}, UnlinkOffColor = true, OffColor = {124,124,124}, FontSize = 14}
    end
  end
  
  return layout, graphics
end

--Start event based logic
if Controls then
  json = require("rapidjson")
  
  -- Controls Aliases
  local UCIPinName = Controls.UCIPinName
  local UCIPin = Controls.UCIPin
  local TouchPanel = Controls.TouchPanel
  local UCI = Controls.UCI
  local UCIPage = Controls.UCIPage
  local PinPadPin = Controls.PinPadPin
  local PinPadDigits = Controls.PinPadDigits
  local PinPadEnter = Controls.PinPadEnter
  local PinPadBackspace = Controls.PinPadBackspace
  local PinPadClear = Controls.PinPadClear
  local AddPinName = Controls.AddPinName
  local AddPinPin = Controls.AddPinPin
  local AddPinSubmit = Controls.AddPinSubmit
  local Status = Controls.Status
  local CoreUsername = Controls.CoreUsername
  local CorePassword = Controls.CorePassword
  
  -- Variables
  local BearerToken = ""
  
  -- Timers, tables, and constants
  PollDataTimer = Timer.New()
  InitTimer = Timer.New()
  StatusClearTimer = Timer.New()
  InitTimer:Start(5)
  local Digits = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "*", "0", "#"}
  local PinData = {}
  local UCIData = {}
  
  -- ***Helper functions***
  -- Pin Pad functions
  --===========================
  function ClearPinString()
    PinPadPin.String = ""
  end
  
  function Backspace()
    PinPadPin.String = string.sub(PinPadPin.String, 1, -2)
  end
  
  function SubmitPin()
    if UCIPin.String == PinPadPin.String then
      Uci.SetPage(TouchPanel.String, UCIPage.String)
      PinPadPin.String = ""
    else
      PinPadPin.String = "Incorrect Pin!"
    end
  end
  --===========================
  
  
  -- utility functions
  --===========================
  function GetIndexInTable(tbl, val)
    local index={}
    for k,v in pairs(tbl) do
      index[v]=k
    end
    return index[val]
  end
  
  function checkIfTblValExists(tbl, val)
    for i, v in pairs(tbl) do 
      if v == val then 
        return true
      end
    end
    return false
  end
  --===========================
  
  
  -- Pin functions
  --===========================
  function SetPin()
    local tblLength = #UCIPinName.Choices
    if checkIfTblValExists(UCIPinName.Choices, UCIPinName.String) == true then
      local index = GetIndexInTable(UCIPinName.Choices, UCIPinName.String)
      UCIPin.String = PinData[index].pin
      else 
        UCIPinName.String = UCIPinName.Choices[tblLength]
        UCIPin.String = PinData[tblLength].pin
    end
  end
  
  function AddPin()
    if AddPinName.String ~= "" and AddPinPin.String ~= "" then
      postPinData(json.encode({{
        name = AddPinName.String,
        pin =  AddPinPin.String
      }}))
      else 
        Status.String = "Please Enter a Pin Name and Pin"
    end
  end
  
  function SetPinNamesTbl(data)
    local PinNamesTbl = {}
    for i, v in ipairs(data) do 
      table.insert(PinNamesTbl, v.name)
    end
    UCIPinName.Choices = PinNamesTbl
  end
  --===========================
  
  
  -- Status functions
  --===========================
  function ClearStatus()
    Status.String = ""
    StatusClearTimer:Stop()
  end
  
  function SetStatus(code, d)
    if code == math.floor(204) then 
      Status.String = "Successfully Added Pin!"
      else
        if json.decode(d).code and json.decode(d).message then  
          Status.String = json.decode(d).code..": "..json.decode(d).message
        end
    end
  end
  --===========================
  
  
  -- Touch Panel and UCI Info functions
  --===========================
  function getTouchPanels()
    local myInventory = Design.GetInventory()
    local touchScreens = {}
    for i, v in ipairs(myInventory) do 
      if v.Type == "Touch Screen" or v.Model == "UCI Viewer" then 
        table.insert(touchScreens, v.Name)
      end
    end
    TouchPanel.Choices = touchScreens 
  end
  
  function SetUCINamesTbl(data)
    local UCINamesTbl = {}
    for i, v in ipairs(data) do 
      table.insert(UCINamesTbl, v.Name)
    end
    UCI.Choices = UCINamesTbl
  end
  
  function SetUCIPage(data)
    local uciPageNames = {}
    for i, uci in ipairs(data) do
      if UCI.String == uci.Name then
        for j, page in ipairs(uci.Pages) do
          table.insert(uciPageNames, page.Name)
        end
      end
    end
    UCIPage.Choices = uciPageNames
  end
  
  function GetUCIDataAndClear()
    getUCIData()
    UCIPage.String = ""
  end
  --===========================
  
  
  -- HTTP functions
  --===========================
  function ParseResponse(tbl, code, d, e)
    if tbl['Url'] == "http://127.0.0.1/designs/current_design/ucis.json" then
      UCIData = json.decode(d).Ucis
      SetUCINamesTbl(UCIData)
      SetUCIPage(UCIData)
    elseif tbl['Url'] == "http://127.0.0.1/api/v0/systems/1/ucis/pins" then 
      if code == 401.0 then -- If Access Management is enabled and a username and password is required.
        Status.String = "Username and Password Required"
        if CorePassword.String ~= "" and CoreUsername.String ~= "" then
          Login(json.encode({
            password = CorePassword.String,
            username = CoreUsername.String
          }))
        end
      elseif code == 200.0 then -- Successful pin GET
        PinData = json.decode(d).items
        SetPinNamesTbl(PinData)
        SetPin()
      elseif code == 204.0 then -- Successful pin POST
        Status.String = "Successfully Added Pin!"
        getPinData() 
        StatusClearTimer:Start(5)
      else -- Unsuccessful pin POST
        Status.String = math.floor(code)..": "..json.decode(d).message
        StatusClearTimer:Start(5) 
      end
    elseif tbl['Url'] == "http://127.0.0.1/api/v0/logon" then
      if code == 201.0 then -- Successful login
        BearerToken = "Bearer "..json.decode(d).token
        getPinData()
        Status.String = "Successful Login!"
        StatusClearTimer:Start(5)
      elseif code == 404.0 then -- Unsuccessful login
        Status.String = "Username and Password Incorrect" 
      end
    end
  end
  
  function Login(creds) 
    HttpClient.Upload { 
      Url = "http://127.0.0.1/api/v0/logon", 
      Method = "POST",
      Headers = { ["Content-Type"] = "application/json"}, 
      Timeout = 5, 
      Data = creds,
      EventHandler = ParseResponse
    }
  end
  
  function getPinData() 
    HttpClient.Download { 
      Url = "http://127.0.0.1/api/v0/systems/1/ucis/pins", 
      Headers = { 
        ["Content-Type"] = "application/json", 
        ["Accept"] = 'application/json',
        ["Authorization"] = BearerToken
      }, 
      Timeout = 5, 
      EventHandler = ParseResponse
    }
  end
  
  function postPinData(data) 
    AddPinName.String = ""
    AddPinPin.String = ""
    HttpClient.Upload { 
      Url = "http://127.0.0.1/api/v0/systems/1/ucis/pins", 
      Method = "POST",
      Headers = { 
        ["Content-Type"] = "application/json",
        ["Accept"] = "application/json",
        ["Authorization"] = BearerToken
      }, 
      Timeout = 5, 
      Data = data,
      EventHandler = ParseResponse
    }
  end
  
  function getUCIData() 
    HttpClient.Download { 
      Url = "http://127.0.0.1/designs/current_design/ucis.json", 
      Headers = { ["Content-Type"] = "application/json" } , 
      Timeout = 5, 
      EventHandler = ParseResponse
    }
  end
  --===========================
  
  
  -- Initializing function
  --===========================
  function Init()
    getPinData() 
    getTouchPanels()
    getUCIData()
    ClearStatus()
    PollDataTimer:Start(1)
    InitTimer:Stop()
  end
  --===========================
  
  
  --Event Handlers
  --================================
  PinPadClear.EventHandler = ClearPinString
  PinPadBackspace.EventHandler = Backspace
  PinPadEnter.EventHandler = SubmitPin
  UCIPinName.EventHandler = SetPin
  AddPinSubmit.EventHandler = AddPin
  UCI.EventHandler = GetUCIDataAndClear
  
  for i, dig in ipairs(Digits) do
    PinPadDigits[i].EventHandler = function()
      if PinPadPin.String == "Incorrect Pin!" then
        PinPadPin.String = ''
        PinPadPin.String = PinPadPin.String..dig
      else
        PinPadPin.String = PinPadPin.String..dig
      end
    end
  end
  
  PollDataTimer.EventHandler = getPinData
  InitTimer.EventHandler = Init
  StatusClearTimer.EventHandler = ClearStatus
  --===========================
end
